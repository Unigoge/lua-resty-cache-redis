init_by_lua_block {
  local shdict = require "shdict"
  local CONFIG = shdict.new("config")

  CONFIG:set("ngx.caches.scope", "ngx")

  -- system caches

  CONFIG:set("ngx.caches.tevt.socket.timeout", 5000)
  CONFIG:set("ngx.caches.tevt.socket", "unix:logs/tevt.sock")

  CONFIG:set("ngx.caches.system.socket.timeout", 5000)
  CONFIG:set("ngx.caches.system.socket", "unix:logs/system.sock")

  -- example caches

  CONFIG:set("ngx.caches.example.socket.timeout", 5000)
  CONFIG:set("ngx.caches.example.socket.pool_size", 100)
  CONFIG:set("ngx.caches.example.socket.pool_idle", 10)
  CONFIG:set("ngx.caches.example.ro.socket", "unix:logs/redis.sock")
  CONFIG:set("ngx.caches.example.rw.socket", "unix:logs/redis.sock")
  CONFIG:set("ngx.caches.example.debug", true)
  CONFIG:object_set("ngx.caches.example.memory", {
    L1 = { ttl = 10, count = 1000 }, -- worker local
    L2 = {}                          -- shared memory no ttl
  })

  CONFIG:set("ngx.caches.example_upsync.socket.timeout", 5000)
  CONFIG:set("ngx.caches.example_upsync.socket.pool_size", 100)
  CONFIG:set("ngx.caches.example_upsync.socket.pool_idle", 10)
  CONFIG:set("ngx.caches.example_upsync.ro.socket", "unix:logs/redis.sock")
  CONFIG:set("ngx.caches.example_upsync.rw.socket", "unix:logs/redis.sock")
  CONFIG:set("ngx.caches.example_upsync.sync_interval", 10)
  CONFIG:set("ngx.caches.example_upsync.debug", true)

  -- common dict memory L1/L2 cache settings
  CONFIG:object_set("ngx.caches.dict.memory", {
    L1 = { ttl = 10, count = 1000 }, -- worker local
    L2 = {}                          -- shared memory no ttl
  })

  -- upsync http

  CONFIG:set("ngx.upsync.timeout.connect", 5000)
  CONFIG:set("ngx.upsync.timeout.send", 5000)
  CONFIG:set("ngx.upsync.timeout.read", 5000)
  CONFIG:set("ngx.upsync.socket.keepalive.pool_size", 100)
  CONFIG:set("ngx.upsync.socket.keepalive.pool_inactive", 60000)

  -- init api
  local init = require "caches.init"
  init.process()
}

# memory dictionaries (L1 cache)

lua_shared_dict example        100m;
lua_shared_dict example_upsync 100m;