server {
  listen 8888;

  location /ngx/cache {

    rewrite_by_lua_block {
      local name, method = ngx.var.uri:match("^/ngx/cache/(.+)/(.+)$")
      local loaded, cache = unpack(name and { pcall(require, "caches." .. name) } or { nil })
      ngx.caches.throw_internal_err(loaded, "CACHE_NOT_FOUND", ngx.HTTP_NOT_FOUND)
      ngx.caches.thorow_on_unimplemented(cache, method)
      ngx.ctx.cache = cache
    }
  
    location ~ ^/ngx/cache/.+/get$ {
      content_by_lua_block {
        ngx.caches.check_request_method("GET")
        ngx.caches.success_or_throw(ngx.ctx.cache.get(ngx.req.get_uri_args()))
      }
    }
  
    location ~ ^/ngx/cache/.+/search$ {
      content_by_lua_block {
        ngx.caches.check_request_method("GET")
        ngx.caches.success_or_throw(ngx.ctx.cache.search(ngx.req.get_uri_args()))
      }
    }
  
    location ~ ^/ngx/cache/.+/add$ {
      lua_need_request_body on;
      content_by_lua_block {
        local cjson = require "cjson"
        ngx.caches.check_request_method("POST")
        local ok, req = pcall(cjson.decode, ngx.req.get_body_data())
        ngx.caches.throw_internal_err(ok, "bad args: body is not JSON")
        local val = ngx.caches.throw_internal_err(ngx.ctx.cache.add(req))
        ngx.caches.success(val, ngx.HTTP_CREATED)
      }
    }
  
    location ~ ^/ngx/cache/.+/replace$ {
      lua_need_request_body on;
      content_by_lua_block {
        local cjson = require "cjson"
        ngx.caches.check_request_method("PUT")
        local ok, req = pcall(cjson.decode, ngx.req.get_body_data())
        ngx.caches.throw_internal_err(ok, "bad args: invalid token data")
        ngx.caches.success_or_throw(ngx.ctx.cache.replace(req))
      }
    }
  
    location ~ ^/ngx/cache/.+/update$ {
      lua_need_request_body on;
      content_by_lua_block {
        local cjson = require "cjson"
        ngx.caches.check_request_method("PATCH")
        local ok, req = pcall(cjson.decode, ngx.req.get_body_data())
        ngx.caches.throw_internal_err(ok, "bad args: invalid token data")
        ngx.caches.success_or_throw(ngx.ctx.cache.update(req))
      }
    }
  
    location ~ ^/ngx/cache/.+/delete$ {
      content_by_lua_block {
        ngx.caches.check_request_method("DELETE")
        ngx.caches.success_or_throw(ngx.ctx.cache.delete(ngx.req.get_uri_args()))
      }
    }
  
    location ~ ^/ngx/cache/.+/dump$ {
      content_by_lua_block {
        ngx.caches.check_request_method("GET")
        ngx.caches.success_or_throw(ngx.ctx.cache.dump())
      }
    }
  
    location ~ ^/ngx/cache/.+/purge$ {
      content_by_lua_block {
        ngx.caches.check_request_method("POST")
        ngx.caches.success_or_throw(ngx.ctx.cache.purge())
      }
    }
  
    location ~ ^/ngx/cache/.+/desc$ {
      content_by_lua_block {
        ngx.caches.check_request_method("GET")
        ngx.caches.success_or_throw(ngx.ctx.cache.desc())
      }
    }

  }
}